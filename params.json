{
  "name": "SceneGraph",
  "tagline": "PySide scene graph UI",
  "body": "SceneGraph\r\n----------\r\n![Alt text](/doc/images/intro.png?raw=true \"SceneGraph\")\r\n\r\n**SceneGraph** is a fast & flexible framework for visualizing node graphs using in visual effects DCCs using PySide. Scenes can be saved and loaded in a variety of applications, and users can easily add their own nodes to suit their needs.\r\n\r\n=====\r\nUsage\r\n=====\r\n\r\n**Launching the interface:**\r\n\r\n```python\r\n    from SceneGraph import scenegraph\r\n    sgui = scenegraph.SceneGraphUI()\r\n    sgui.show()\r\n    \r\n    # access the node graph\r\n    graph = sgui.graph\r\n\r\n    # list all node names\r\n    node_names = graph.node_names()\r\n\r\n    # get all of the node widgets from the GraphicsScene\r\n    scene = sgui.view.scene()\r\n    nodes = scene.nodes()\r\n\r\n    # query all of the current dag nodes\r\n    dags = graph.nodes()\r\n\r\n    # return a named dag node\r\n    dagnode = graph.get_node('node1')\r\n\r\n    # get node attributes\r\n    dagnode.getNodeAttributes()\r\n        \r\n    # set arbitrary attributes\r\n    dagnode.setNodeAttributes(env='maya', version='2014')\r\n\r\n    # querying widgets\r\n\r\n    # get an output connection widget\r\n    c_output=n1.get_connection('output')\r\n\r\n    # query an edge \r\n    e1=scene.get_edge('node1.output', 'node2.input')[0]\r\n\r\n    # get edge source item (Connection)\r\n    e1.source_item\r\n\r\n    # get connected nodes from an edge\r\n    e1.listConnections()\r\n\r\n```\r\n\r\n**Maya Usage:**\r\n\r\n```python\r\n\r\n    from SceneGraph import scenegraph_maya\r\n    scenegraph_maya.main()\r\n\r\n```\r\n\r\n**Nuke Usage:**\r\n\r\n```python\r\n\r\n    from SceneGraph import scenegraph_nuke\r\n    scenegraph_nuke.main()\r\n\r\n```\r\n\r\n**SceneGraph API:**\r\n\r\n```python\r\n\r\n    # create a graph\r\n    from SceneGraph import core\r\n    g=core.Graph()\r\n\r\n    # query the currently loaded node types\r\n    node_types = g.node_types()\r\n\r\n    # add some default nodes\r\n    n1 = g.add_node('default', name='node1')\r\n    n2 = g.add_node('default', name='node2')\r\n\r\n    # query node connections\r\n    if n1.is_input_connection:\r\n        conn = n1.output_connections()\r\n\r\n    # add a new input and output attribute\r\n    n1.add_input(name='fileIn')\r\n\r\n    # connect the nodes (default output/inputs assumed)\r\n    e1 = g.add_edge(n1, n2)\r\n\r\n    # connect with a connection string\r\n    e1 = g.connect('node1.output', 'node2.input')\r\n\r\n    # write the graph\r\n    g.write('~/graphs/my_graph.json')\r\n\r\n    # query all nodes in the graph\r\n    print g.nodes()\r\n\r\n    # query all node names\r\n    print g.node_names()\r\n\r\n    # query all connections\r\n    print g.connections()\r\n\r\n    # Updating Attributes\r\n    from SceneGraph import core\r\n    g = core.Graph()\r\n    d = g.add_node('default')\r\n    m = g.add_node('merge')\r\n    g.add_edge(d, m, dest_attr='inputA')\r\n    m.rename_connection('inputA', 'newInput')\r\n\r\n```\r\n\r\n**Advanced API:**\r\n\r\n```python\r\n    # add attributes to a dag node, flag it as an input connection\r\n    attr=n1.addAttr('env', value='maya', input=True)\r\n\r\n    # set the value via the node\r\n    n1.env = 'nuke'\r\n\r\n    # set the value via the attribute instance\r\n    attr.value = 'houdini'\r\n\r\n```\r\n\r\n**Dependencies:**\r\n\r\n* Python 2.7\r\n* simplejson\r\n* NetworkX 1.9.1\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}